"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = __importDefault(require("@parcel/core"));
const parseConfig_1 = __importDefault(require("./parseConfig"));
const prefixX = "⚛️  xAtom  👉";
const buildServer = (configFilePath) => {
    const config = (0, parseConfig_1.default)(configFilePath);
    const bundler = new core_1.default({
        entries: config.source,
        defaultConfig: "@parcel/config-default",
        shouldAutoInstall: true,
        shouldDisableCache: true,
        mode: "production",
        targets: {
            main: {
                engines: {
                    browsers: "> 0.5%, last 2 versions, not dead",
                },
                distDir: config.dist,
                context: "browser",
                isLibrary: false,
                optimize: true,
                sourceMap: true,
                includeNodeModules: true,
                scopeHoist: true,
            },
        },
    });
    console.log(prefixX, "Building production bundle");
    bundler
        .run()
        .then((ev) => {
        if (ev.type === "buildSuccess") {
            let bundles = ev.bundleGraph.getBundles();
            console.log(prefixX, "Build done", `${ev.buildTime}ms |`, `Total ${bundles.length} bundles total `);
            bundles.forEach((bundle) => {
                console.log(prefixX, `Built ${bundle.displayName}`);
            });
        }
        else if (ev.type === "buildFailure") {
            console.log(prefixX, "Build Failed");
        }
    })
        .catch((err) => {
        console.log(prefixX, err.message);
    })
        .finally(() => {
        console.log(prefixX, "Done!");
    });
};
exports.default = buildServer;
