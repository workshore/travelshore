import { AxiosHeaders, AxiosStatic, CreateAxiosDefaults, InternalAxiosRequestConfig } from "axios";
type axiosConfig = InternalAxiosRequestConfig<any>;
type beforeRequestFn = (config: axiosConfig, next: (config: axiosConfig) => void) => void;
type retryRequestOnFailedFn = (err: any, config: axiosConfig, retry: (config: axiosConfig) => void, skip: () => void) => void;
export class AxiosClientConfigurator {
    constructor(baseUrl: string, otherConfig?: CreateAxiosDefaults, axiosOverrides?: AxiosStatic);
    beforeRequest(fn: beforeRequestFn): this;
    retryRequestOnFailed(fn: retryRequestOnFailedFn): this;
    getConfig(): {
        baseAxios: AxiosStatic;
        config: CreateAxiosDefaults<any>;
        baseUrl: string;
        beforeRequestOps: beforeRequestFn[];
        retryRequestOps: retryRequestOnFailedFn[];
    };
}
export class AxiosClient {
    constructor(config: AxiosClientConfigurator);
    get<TData = {}, TVariables = {}>(path: string, config?: {
        data?: TVariables;
    }): {
        data: () => TData;
        fetch: (data?: TVariables, headers?: AxiosHeaders) => Promise<TData>;
        isLoading: () => boolean;
        onLoadingChange: (fn: (status: boolean) => void) => () => void;
        onLoadingChangeOnce: (fn: (status: boolean) => void) => void;
        onData: (fn: (data: TData) => void) => () => void;
        onDataOnce: (fn: (data: TData) => void) => void;
        onError: (fn: (err: any) => void) => () => void;
        onErrorOnce: (fn: (err: any) => void) => void;
    };
    post<TData = {}, TVariables = {}>(path: string, config?: {
        data?: TVariables;
    }): {
        data: () => TData;
        fetch: (data?: TVariables, headers?: AxiosHeaders) => Promise<TData>;
        isLoading: () => boolean;
        onLoadingChange: (fn: (status: boolean) => void) => () => void;
        onLoadingChangeOnce: (fn: (status: boolean) => void) => void;
        onData: (fn: (data: TData) => void) => () => void;
        onDataOnce: (fn: (data: TData) => void) => void;
        onError: (fn: (err: any) => void) => () => void;
        onErrorOnce: (fn: (err: any) => void) => void;
    };
    patch<TData = {}, TVariables = {}>(path: string, config?: {
        data?: TVariables;
    }): {
        data: () => TData;
        fetch: (data?: TVariables, headers?: AxiosHeaders) => Promise<TData>;
        isLoading: () => boolean;
        onLoadingChange: (fn: (status: boolean) => void) => () => void;
        onLoadingChangeOnce: (fn: (status: boolean) => void) => void;
        onData: (fn: (data: TData) => void) => () => void;
        onDataOnce: (fn: (data: TData) => void) => void;
        onError: (fn: (err: any) => void) => () => void;
        onErrorOnce: (fn: (err: any) => void) => void;
    };
    put<TData = {}, TVariables = {}>(path: string, config?: {
        data?: TVariables;
    }): {
        data: () => TData;
        fetch: (data?: TVariables, headers?: AxiosHeaders) => Promise<TData>;
        isLoading: () => boolean;
        onLoadingChange: (fn: (status: boolean) => void) => () => void;
        onLoadingChangeOnce: (fn: (status: boolean) => void) => void;
        onData: (fn: (data: TData) => void) => () => void;
        onDataOnce: (fn: (data: TData) => void) => void;
        onError: (fn: (err: any) => void) => () => void;
        onErrorOnce: (fn: (err: any) => void) => void;
    };
    delete<TData = {}, TVariables = {}>(path: string, config?: {
        data?: TVariables;
    }): {
        data: () => TData;
        fetch: (data?: TVariables, headers?: AxiosHeaders) => Promise<TData>;
        isLoading: () => boolean;
        onLoadingChange: (fn: (status: boolean) => void) => () => void;
        onLoadingChangeOnce: (fn: (status: boolean) => void) => void;
        onData: (fn: (data: TData) => void) => () => void;
        onDataOnce: (fn: (data: TData) => void) => void;
        onError: (fn: (err: any) => void) => () => void;
        onErrorOnce: (fn: (err: any) => void) => void;
    };
}
export * from "axios";
